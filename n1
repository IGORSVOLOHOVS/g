#include <iostream>
#include <map>
#include <string>
#include <tuple>
#include <vector>

using namespace std;
// Перечислимый тип для статуса задачи
enum class TaskStatus {
	  NEW,          // новая
	  IN_PROGRESS,  // в разработке
	  TESTING,      // на тестировании
	  DONE          // завершена
};

// Объявляем тип-синоним для map<TaskStatus, int>,
// позволяющего хранить количество задач каждого статуса
using TasksInfo = map<TaskStatus,int>;

class TeamTasks {
public:
    
    map<string,TasksInfo> Person_Info;
	  // Получить статистику по статусам задач конкретного разработчика
	  const TasksInfo& GetPersonTasksInfo(const string& person) const
    {
        return Person_Info.at(person);
    }
	  
	  // Добавить новую задачу (в статусе NEW) для конкретного разработчитка
	  void AddNewTask(const string& person){
          Person_Info[person][TaskStatus::NEW]++;
      }
	  
	  // Обновить статусы по данному количеству задач конкретного разработчика,
	  // подробности см. ниже
	  tuple<TasksInfo, TasksInfo> PerformPersonTasks(
						const string& person, int task_count){
          TasksInfo a,b;
          TasksInfo& status_count = Person_Info.at(person);
          for(auto& [status,count] : status_count)
          {
              
              if(task_count - count > 0)
              {
                  a.insert(static_cast<int>(status) + 1,count);
                  task_count-=count;
                  count = 0;
              }else
              {
                  a.insert(static_cast<int>(status) + 1,task_count);
                  break;
              }
          }
         for(auto& [status,count] : status_count)
          {
              
              if(status == TaskStatus::DONE)
              {
                  break;
              }else if(count == 0)
              {
                 continue;
              }else
              {
                  b.insert({status, count});
              }
          }
          return {a,b};
      }
};

// Принимаем словарь по значению, чтобы иметь возможность
// обращаться к отсутствующим ключам с помощью [] и получать 0,
// не меняя при этом исходный словарь
void PrintTasksInfo(TasksInfo tasks_info) {
    cout << tasks_info[TaskStatus::NEW] << " new tasks"s <<
        ", "s << tasks_info[TaskStatus::IN_PROGRESS] << " tasks in progress"s <<
        ", "s << tasks_info[TaskStatus::TESTING] << " tasks are being tested"s <<
        ", "s << tasks_info[TaskStatus::DONE] << " tasks are done"s << endl;
}

int main() {
	  TeamTasks tasks;
	  tasks.AddNewTask("Ilia"s);
	  for (int i = 0; i < 3; ++i) {
		    tasks.AddNewTask("Ivan"s);
	  }
	  cout << "Ilia's tasks: "s;
	  PrintTasksInfo(tasks.GetPersonTasksInfo("Ilia"s));
	  cout << "Ivan's tasks: "s;
	  PrintTasksInfo(tasks.GetPersonTasksInfo("Ivan"s));
	  
	  TasksInfo updated_tasks, untouched_tasks;
	  
	  tie(updated_tasks, untouched_tasks) =
			      tasks.PerformPersonTasks("Ivan"s, 2);
	  cout << "Updated Ivan's tasks: "s;
	  PrintTasksInfo(updated_tasks);
	  cout << "Untouched Ivan's tasks: "s;
	  PrintTasksInfo(untouched_tasks);
	  
	  tie(updated_tasks, untouched_tasks) =
			      tasks.PerformPersonTasks("Ivan"s, 2);
	  cout << "Updated Ivan's tasks: "s;
	  PrintTasksInfo(updated_tasks);
	  cout << "Untouched Ivan's tasks: "s;
	  PrintTasksInfo(untouched_tasks);
}
